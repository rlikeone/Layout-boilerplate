// Float layout
.row {
  max-width: $grid-width;
  background-color: #eee;
  margin: 0 auto;

  // Not applied on last child
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
  }

  // Remove 0px height
  @include clearfix;

  // Attribute selector. Selects all the elements which have the specified attribute and value. ^="col-" selects all the classes which start with col-,
  // ^ = starts with col-
  // * = contains col-
  // $ = ends with col-
  [class^="col-"] {
    background-color: orangered;
    float: left;

    &:not(:last-child) {
      margin-right: $gutter-horizontal;
    }
  }

  .col-1-of-2 {
    // Give every column a correct width of 100% - gutter width divided by num of cols
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
  }

  .col-2-of-3 {
    // Translates to (2 * .1/3col) + gutter width
    width: calc(
      ((2 * (100% - 2 * #{$gutter-horizontal}) / 3)) + #{$gutter-horizontal}
    );
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  // Translates to (2 * .1/4col) + gutter width
  .col-2-of-4 {
    width: calc(
      2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal}
    );
  }

  // Translates to (3 * .1/4col) + 2 * gutter width
  .col-3-of-4 {
    width: calc(
      3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal}
    );
  }
}

// .row::after
